class SnakeGame {
    field Snake snake;
    field int delay;
    field SnakeGrid grid;
    field int cycle;

    constructor SnakeGame new() {
        do Random.setSeed(RandSeed.getSeed());

        let cycle = 0;
        let delay = 100;
        let grid = SnakeGrid.new(512, 256);
        let snake = Snake.new(this, grid.sizeX() / 2, grid.sizeY() / 2);

        do grid.placeFood();

        return this;
    }

    method void dispose() {
        do snake.dispose();
        do grid.dispose();
        do Memory.deAlloc(this);
        return;
    }

    method void run() {
        var int key;
        var boolean exit;

        let exit = false;

        while(~exit) {
            let key = Keyboard.keyPressed();
            if (key = 81) {
                // q
                let exit = true;
            }
            // left arrow, valid only if we weren't going right
            if (key = 130 & ~(snake.getDir() = 4)) {
                do snake.setDir(3);
            }
            // up arrow, valid only if we weren't going down
            if (key = 131 & ~(snake.getDir() = 2)) {
                do snake.setDir(1);
            }
            // right arrow, valid only if we weren't going left
            if (key = 132 & ~(snake.getDir() = 3)) {
                do snake.setDir(4);
            }
            // down arrow, valid only if we weren't going up
            if (key = 133 & ~(snake.getDir() = 1)) {
                do snake.setDir(2);
            }

            if (~snake.tryMove()) {
                do grid.drawCrashed();
                do Sys.halt();
            }

            if (grid.checkFood(snake.posX(), snake.posY())) {
                do snake.eatFood();
                do nextLevel();
                do grid.placeFood();
            }

            do snake.grow(cycle);

            do grid.drawFood();
            do Sys.wait(delay);
            do nextCycle();

            if( snake.checkRewriteHistory() ) {
                let cycle = snake.getLength();
            }
        }

        do grid.drawDone();
        do Sys.halt();

        return;

    }

    method void nextLevel() {
        if( delay > 30 ) {
            let delay = delay - 5;
        }

        return;
    }

    method void nextCycle() {
        let cycle = cycle + 1;
        return;
    }

    method SnakeGrid getGrid() {
        return grid;
    }
    method int getCycle() {
        return cycle;
    }
}
