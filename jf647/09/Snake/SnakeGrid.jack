class SnakeGrid {
    field int sizeX, sizeY;

    field int foodX, foodY;

    field Array grid;

    constructor SnakeGrid new(int Ax, int Ay) {
        let sizeX = Ax / 4;
        let sizeY = (Ay-16) / 4;

        do initGrid();

        return this;
    }

    method void dispose() {
        var int curX;
        var Array xGrid;

        let curX = 0;
        while( curX < sizeX ) {
            let xGrid = grid[curX];
            do xGrid.dispose();
            let curX = curX + 1;
        }

        do Memory.deAlloc(this);
        return;
    }

    method void initGrid() {
        var int curX, curY;
        var Array xGrid;

        let grid = Array.new(sizeX);
        let curX = 0;

        while(curX < sizeX) {
            let xGrid = Array.new(sizeY);
            let curY = 0;
            while(curY < sizeY) {
                let xGrid[curY] = false;
                let curY = curY + 1;
            }
            let grid[curX] = xGrid;
            let curX = curX + 1;
        }

        return;
    }

    method void placeFood() {
        var boolean found;
        var int randX, randY;

        // don't place the food on top of a snake piece
        let found = false;
        while (~found) {
            let randX = Random.randRange(sizeX);
            let randY = Random.randRange(sizeY);
            if(~checkOccupied(randX, randY)) {
                let found = true;
            }
        }

        let foodX = randX;
        let foodY = randY;

        return;
    }

    method void drawSnakeBit(int x, int y) {
        do Screen.setColor(true);
        do Screen.drawRectangle(x * 4, y * 4, (x * 4) + 4, (y * 4) + 4);
        do setOccupied(x, y, true);
        return;
    }

    method void clearSnakeBit(int x, int y) {
        do Screen.setColor(false);
        do Screen.drawRectangle(x * 4, y * 4, (x * 4) + 4, (y * 4) + 4);
        do setOccupied(x, y, false);
        return;
    }

    method void drawFood() {
        do Screen.setColor(true);
        do Screen.drawCircle((foodX * 4) + 2, (foodY * 4) + 2, 2);

        return;
    }

    method void drawCrashed() {
        var String tString;

        do Output.moveCursor(22, 12);
        let tString = "*CRASHED*";
        do Output.printString(tString);
        do tString.dispose();

        return;
    }

    method void drawDone() {
        var String tString;

        do Output.moveCursor(22, 12);
        let tString = " [DONE]  ";
        do Output.printString(tString);
        do tString.dispose();

        return;
    }

    method void setOccupied(int x, int y, boolean occupied) {
        var Array xGrid;
        let xGrid = grid[x];
        let xGrid[y] = occupied;
        return;
    }

    method boolean checkOccupied(int x, int y) {
        var Array xGrid;
        let xGrid = grid[x];
        if (xGrid[y]) {
            return true;
        }
        else {
            return false;
        }
    }

    method boolean checkFood(int x, int y) {
        if (x = foodX & y = foodY) {
            return true;
        }

        return false;
    }

    // reader methods
    method int sizeX() {
        return sizeX;
    }

    method int sizeY() {
        return sizeY;
    }
}
